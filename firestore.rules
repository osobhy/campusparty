rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow anyone to read parties
    match /parties/{partyId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
                     (request.auth.uid == resource.data.host.id || 
                      request.resource.data.attendees.hasOnly(resource.data.attendees) ||
                      resource.data.attendees.hasOnly(request.resource.data.attendees) ||
                      request.resource.data.paidAttendees.hasOnly(resource.data.paidAttendees) ||
                      resource.data.paidAttendees.hasOnly(request.resource.data.paidAttendees));
      allow delete: if request.auth != null && request.auth.uid == resource.data.host.id;
      
      // Party feedback
      match /feedback/{feedbackId} {
        allow read: if true;
        allow create: if request.auth != null && 
                       (request.resource.data.userId == request.auth.uid);
        allow update: if request.auth != null && 
                       (resource.data.userId == request.auth.uid || 
                        getParty(partyId).data.host.id == request.auth.uid);
        allow delete: if request.auth != null && 
                       (resource.data.userId == request.auth.uid || 
                        getParty(partyId).data.host.id == request.auth.uid);
      }
      
      // Party expenses
      match /expenses/{expenseId} {
        allow read: if request.auth != null && 
                     (isPartyMember(partyId, request.auth.uid) || 
                      getParty(partyId).data.host.id == request.auth.uid);
        allow create: if request.auth != null && 
                       (isPartyMember(partyId, request.auth.uid) || 
                        getParty(partyId).data.host.id == request.auth.uid);
        allow update: if request.auth != null && 
                       (resource.data.paidBy == request.auth.uid || 
                        getParty(partyId).data.host.id == request.auth.uid ||
                        request.resource.data.settledBy.hasOnly(resource.data.settledBy) ||
                        resource.data.settledBy.hasOnly(request.resource.data.settledBy));
        allow delete: if request.auth != null && 
                       (resource.data.paidBy == request.auth.uid || 
                        getParty(partyId).data.host.id == request.auth.uid);
      }
      
      // Party games
      match /games/{gameId} {
        allow read: if request.auth != null && 
                     (isPartyMember(partyId, request.auth.uid) || 
                      getParty(partyId).data.host.id == request.auth.uid);
        allow create: if request.auth != null && 
                       getParty(partyId).data.host.id == request.auth.uid;
        allow update: if request.auth != null && 
                       (getParty(partyId).data.host.id == request.auth.uid ||
                        request.resource.data.participants.hasOnly(resource.data.participants) ||
                        resource.data.participants.hasOnly(request.resource.data.participants));
        allow delete: if request.auth != null && 
                       getParty(partyId).data.host.id == request.auth.uid;
      }
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Payments
    match /payments/{paymentId} {
      allow read: if request.auth != null && 
                   (request.auth.uid == resource.data.userId || 
                    getParty(resource.data.partyId).data.host.id == request.auth.uid);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
                     (request.auth.uid == resource.data.userId || 
                      getParty(resource.data.partyId).data.host.id == request.auth.uid);
      allow delete: if false; // Don't allow deletion of payment records
    }
    
    // Games collection
    match /games/{gameId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
                     (request.auth.uid == resource.data.creatorId || 
                      request.resource.data.popularity != resource.data.popularity);
      allow delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
    // Designated Drivers collection
    match /designated_drivers/{ddId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
                     (request.auth.uid == resource.data.userId || 
                      getParty(resource.data.partyId).data.host.id == request.auth.uid);
      allow delete: if request.auth != null && 
                     (request.auth.uid == resource.data.userId || 
                      getParty(resource.data.partyId).data.host.id == request.auth.uid);
    }
    
    // Drink Tracking collection
    match /drink_tracking/{trackingId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Ride Requests collection
    match /ride_requests/{requestId} {
      allow read: if request.auth != null && 
                   (request.auth.uid == resource.data.userId || 
                    request.auth.uid == resource.data.driverId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
                     (request.auth.uid == resource.data.userId || 
                      request.auth.uid == resource.data.driverId);
      allow delete: if request.auth != null && 
                     (request.auth.uid == resource.data.userId || 
                      request.auth.uid == resource.data.driverId);
    }
    
    // Helper function to get a party document
    function getParty(partyId) {
      return get(/databases/$(database)/documents/parties/$(partyId));
    }
    
    // Helper function to check if a user is a member of a party
    function isPartyMember(partyId, userId) {
      let party = getParty(partyId).data;
      return userId in party.attendees;
    }
  }
} 